buildscript {
  ext {
    queryDslVersion = "5.0.0"
  }
}
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.1'
	id 'io.spring.dependency-management' version '1.1.0'
  id "com.ewerk.gradle.plugins.querydsl" version '1.0.10'
	id 'jacoco'
}
jacoco {
  // JaCoCo 버전
  toolVersion = '0.8.8'

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "$/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}
jacocoTestReport {
  reports {
    // 원하는 리포트를 켜고 끌 수 있습니다.
    html.enabled true
    xml.enabled false
    csv.enabled false

//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
//  html.destination file("$buildDir/jacocoHtml")
//  xml.destination file("$buildDir/jacoco.xml")
  }
}

jacocoTestCoverageVerification {
  // 이 커버리지 기준은 이 글의 맨 아래에서 다시 설명하겠습니다.
  violationRules {
    rule {
	  enabled = true
      element = 'CLASS'

      limit {
        counter = 'BRANCH'
        value = 'COVEREDRATIO'
        minimum = 0.30
      }
	  excludes = [
//      '*.test.*',
        '*.Kotlin*'
      ]
    }
  }
}

task testCoverage(type: Test) {
  group 'verification'
  description 'Runs the unit tests with coverage'

  dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

  tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
  tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}


configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

group = 'com.springboot'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	implementation 'org.springframework.boot:spring-boot-starter-log4j2:3.0.1'
	implementation 'org.springframework.boot:spring-boot-starter-web:3.0.1'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc:3.0.1'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.0.1'
	implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'

	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.1'
	implementation 'com.google.code.gson:gson:2.10.1'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	testImplementation 'com.h2database:h2:2.1.214'

  implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"

  annotationProcessor(

          "jakarta.persistence:jakarta.persistence-api",

          "jakarta.annotation:jakarta.annotation-api",

          "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")


}

tasks.named('test') {
	useJUnitPlatform()
	jacoco {
    	destinationFile = file("$buildDir/jacoco/jacoco.exec")
  	}
}

sourceSets {
  main {
    java {
      srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated/querydsl"]
    }
  }
}

def querydslDir = "$projectDir/build/generated/querydsl"

querydsl {
  jpa = true
  querydslSourcesDir = querydslDir
}
sourceSets {
  main.java.srcDir querydslDir
}
configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
  querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
  options.annotationProcessorPath = configurations.querydsl
}